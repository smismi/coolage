<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0032)http://raphaeljs.com/curver.html -->
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

	<title>Raphaël · Curver</title>
	<!--<link rel="stylesheet" href="./index_files/demo.css" type="text/css" media="screen">-->
	<!--<link rel="stylesheet" href="./index_files/demo-print.css" type="text/css" media="print">-->
	<script src="js/jquery.2.0.js" type="text/javascript" charset="utf-8"></script>
	<script src="js/raphael.js" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		window.onload = function () {
			var r = Raphael("holder", 620, 420),
					discattr = {fill: "#fff", stroke: "none"};
			r.rect(0, 0, 619, 419, 10).attr({stroke: "#666"});
			var _erect = r.rect(0, 0, 100, 122).attr({stroke: "#666"});
			r.text(310, 20, "Drag the points to change the curves").attr({fill: "#fff", "font-size": 16});

            function recalc () {
//
//
                console.log($.map( curve.attr('path'), function(n){
                    return n;
                }))


                var _z = Raphael.pathBBox(curve.attr('path'));


//                console.log(" верх-лево: " +_z.x + ", " + _z.y + " ширина высота: " + _z.width + ", " + _z.height + " коорд центра: " + (_z.x - _z.x2)  + ", " + (_z.y - _z.y2) );

                _erect.attr({x:_z.x,y: _z.y, width:_z.width, height:_z.height});


            }

			function _curve(x, y,
			               x1, y1,
			               x2, y2,
			               x3, y3,

			               color) {
				var path = [
							["M", x, y],
							["L", x1, y1],
							["L", x2, y2],
							["L", x3, y3],
                            ["Z"]
						];
                curve = r.path(path).attr({stroke: color || Raphael.getColor(), "stroke-width": 4, "stroke-linecap": "round"});
                var controls = r.set(
 								r.circle(x, y, 5).attr(discattr),
								r.circle(x1, y1, 5).attr(discattr),
								r.circle(x2, y2, 5).attr(discattr),
								r.circle(x3, y3, 5).attr(discattr)
//
//								r.circle(ax, ay, 5).attr(discattr),
//								r.circle(bx, by, 5).attr(discattr),
//								r.circle(zx, zy, 5).attr(discattr)
//								,
//								r.circle(ax2, ay2, 5).attr(discattr),
//								r.circle(bx2, by2, 5).attr(discattr),
//								r.circle(zx2, zy2, 5).attr(discattr)
						)
                        ;
				controls[0].update = function (x, y) {
					var X = this.attr("cx") + x,
                        Y = this.attr("cy") + y;
					this.attr({cx: X, cy: Y});

//                    console.log(X, Y);
					path[0][1] = X;
					path[0][2] = Y;

                    curve.attr({path: path});
                    recalc();

//					controls[2].update(x, y);
				};
				controls[1].update = function (x, y) {
					var X = this.attr("cx") + x,
							Y = this.attr("cy") + y;
					this.attr({cx: X, cy: Y});
					path[1][1] = X;
					path[1][2] = Y;
                    curve.attr({path: path});


                    recalc();
 				};
				controls[2].update = function (x, y) {
					var X = this.attr("cx") + x,
							Y = this.attr("cy") + y;
					this.attr({cx: X, cy: Y});
					path[2][1] = X;
					path[2][2] = Y;
                    curve.attr({path: path});
                    recalc();

                };
				controls[3].update = function (x, y) {
					var X = this.attr("cx") + x,
							Y = this.attr("cy") + y;
					this.attr({cx: X, cy: Y});
					path[3][1] = X;
					path[3][2] = Y;
                    curve.attr({path: path});
                    recalc();

                };
//				controls[2].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//					path[0][1] = X;
//					path[0][2] = Y;
//					path2[0][1] = X;
//					path2[0][2] = Y;
//					controls[1].update(x, y);
//				};

//				controls[2].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//					path[1][1] = X;
//					path[1][2] = Y;
//					path2[1][1] = X;
//					path2[1][2] = Y;
//					curve.attr({path: path});
//					controls[0].attr({path: path2});
//				};
//				controls[3].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//					path[1][3] = X;
//					path[1][4] = Y;
//					path2[2][1] = X;
//					path2[2][2] = Y;
//					curve.attr({path: path});
//					controls[0].attr({path: path2});
//				};
//				controls[4].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//					path[1][5] = X;
//					path[1][6] = Y;
//					path2[3][1] = X;
//					path2[3][2] = Y;
//					controls[3].update(x, y);
//				};
//				controls[5].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//				};
//				controls[6].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//				};
//				controls[7].update = function (x, y) {
//					var X = this.attr("cx") + x,
//							Y = this.attr("cy") + y;
//					this.attr({cx: X, cy: Y});
//					path[1][5] = X;
//					path[1][6] = Y;
//					path2[3][1] = X;
//					path2[3][2] = Y;
//					controls[3].update(x, y);
//				};
				controls.drag(move, up);
			}

			function move(dx, dy) {
				this.update(dx - (this.dx || 0), dy - (this.dy || 0));
				this.dx = dx;
				this.dy = dy;
			}

			function up() {
				this.dx = this.dy = 0;
			}

			_curve(
                    100, 100,
                    300, 300,
                    100, 300,
                    10, 400,


					"hsb(0, .75, .75)");
		};
	</script>
</head>
<body style="background: #161616">
<div id="holder" style="margin: 200px auto; width: 620px"></div>
<p id="copy">Demo of <a href="http://raphaeljs.com/">Raphaël</a>—JavaScript Vector Library</p>

</body>
</html>